Definition plus_claim : Prop := 2 + 2 = 4.
Check plus_claim.
Theorem plus_claim_is_true:
  plus_claim.
Proof. reflexivity. Qed.
Definition is_three (n : nat) : Prop :=
  n = 3.

Compute is_three 4.
Check (is_three 4).
Check is_three.

Search mult.

Definition injective {A B} (f : A -> B) :=
  forall x y : A, f x = f y -> x =y.
Check injective.
Lemma succ_inj : injective S.
Proof. 
  intros n m H. injection H as H1. apply H1.
Qed.
Lemma inversion_example : forall (n m : nat),
  S n = S m -> n = m.
Proof.
  intros n m H. inversion H. reflexivity. Qed.

Inductive natlist : Type:=
  | nil1 : natlist
  | cons1 : nat -> natlist -> natlist.
Lemma inversion_example1 : forall (x y : nat) (l1 l2 : natlist),
  cons1 x l1 = cons1 y l2 -> x =y /\ l1 = l2.
Proof.
  intros x y l1 l2 H.
  inversion H. split. reflexivity. reflexivity. Qed.
Search tree.
Inductive tree' : Type :=
  | leaf' : nat -> tree'
  | node' : tree' -> tree' -> tree'.
Check @eq : forall A : Type, A -> A -> Prop.

Lemma and_intro : forall A B : Prop, A -> B -> A /\ B.
Proof.
  intros A B HA HB. split.
  - apply HA.
  - apply HB.
Qed.

Example and_example' : 3 + 4 = 7 /\ 2 * 2 = 4.
Proof.
  apply and_intro.
  - reflexivity.
  - reflexivity.
Qed.

Example and_exercise : forall n m : nat, n + m = 0 -> n = 0 /\ m = 0.
Proof.
  intros n m H. split. destruct n as [| n'].
  - reflexivity.
  - discriminate. 
  - destruct m as [| m'].
    + reflexivity.
    + destruct n. simpl in H. apply H. discriminate.
Qed.

Lemma and_example2 : forall n m : nat, n= 0 /\ m = 0 -> n + m = 0.
Proof.
  intros n m H.
  destruct H.
  rewrite H.
  rewrite H0. reflexivity.
Qed.

Lemma and_example2' : forall n m : nat, n = 0 /\ m = 0 -> n + m = 0.
Proof.
  intros n m [Hn Hm]. rewrite Hn. rewrite Hm. reflexivity. Qed.

Lemma and_example3 :
  forall n m : nat, n + m = 0 -> n * m = 0.
Proof.
  intros n m H.
  assert (H' : n = 0 /\ m = 0).
  { apply and_exercise. apply H. }
  destruct H'. rewrite H0. reflexivity.
Qed.

Lemma projl : forall P Q : Prop,
  P /\ Q -> P.
Proof.
  intros P Q H.
  destruct H as [HP _].
  apply HP.
Qed.

Lemma proj2 : forall P Q : Prop,
  P /\ Q -> Q.
Proof.
  intros P Q H.
  destruct H as [_ HQ].
  apply HQ.
Qed.

Theorem and_commu : forall P Q : Prop,
  P /\ Q -> Q /\ P.
Proof.
  intros P Q [HP HQ].
  split. apply HQ. apply HP.
Qed.

Theorem and_assoc : forall P Q R : Prop,
  P /\ (Q /\ R) -> (P /\ Q) /\ R.
Proof.
  intros P Q R [HP [HQ HR]].
  split. split. apply HP. apply HQ. apply HR.
Qed.

Check and.

Lemma eq_mult_0 :
  forall n m : nat, n = 0 \/ m = 0 -> n * m = 0.
Proof.
  intros n m [Hn | Hm].
  - rewrite Hn. reflexivity.
  - rewrite Hm. rewrite <- mult_n_O. reflexivity.
Qed.

Lemma or_intro_l : forall A B : Prop, A -> A\/B.
Proof.
  intros A B HA.
  left. apply HA.
Qed.

Lemma zero_or_succ :
  forall n : nat, n = 0 \/ n = S (pred n).
Proof.
  intros [|n'].
  - left. reflexivity.
  - right. reflexivity.
Qed.

Module MyNot.
Definition not (P:Prop) := P -> False.
Notation "~ x" := (not x) : type_scope.
Check not : Prop -> Prop.
End MyNot.

Theorem ex_falso_quodlibet : forall (P : Prop),
  False -> P.
Proof.
  intros P contra.
  destruct contra.
Qed.

Fact not_implies_our_not : forall (P:Prop),
  ~ P -> (forall (Q : Prop), P -> Q).
Proof.
  intros P HnotP Q HP.
  destruct HnotP.
  exact HP.
Qed.

Notation "x <> y" := (~(x=y)).
Theorem zero_not_one : ~ ( 0 = 1).
Proof.
  unfold not.
  intros contra.
  discriminate.
Qed.

Theorem not_False :
  ~ False.
Proof.
  unfold not.
  intros H.
  destruct H.
Qed.

Theorem contradiction_implies_anything : forall P Q : Prop,
  (P /\ ~P) -> Q.
Proof.
  intros P Q [HP HnotP].
  unfold not in HnotP.
  apply HnotP in HP.
  destruct HP.
Qed.

Theorem double_neg : forall P : Prop,
  P -> ~~P.
Proof.
  intros P HP.
  unfold not.
  intros H.
  apply H.
  apply HP.
Qed.

Theorem contrapositive : forall (P Q : Prop),
  (P -> Q) -> (~Q -> ~P).
Proof.
  intros P Q H HQ.
  unfold not.
  unfold not in HQ.
  intros HP.
  destruct HQ.
  apply H in HP.
  exact HP.
Qed.

Theorem not_both_true_and_false : forall P : Prop,
  ~ (P /\ ~P).
Proof.
  intros P.
  unfold not.
  intros H. destruct H.
  apply H0.
  exact H.
Qed.

Theorem not_true_is_false : forall b : bool,
  b <> true -> b = false.
Proof.
  intros b H.
  destruct b eqn:HE.
  - unfold not in H. exfalso. apply H. reflexivity.
  - reflexivity.
Qed.

Module MyIff.
Definition iff (P Q : Prop) := (P -> Q) /\ (Q -> P).
Notation " P <-> Q " := (iff P Q) (at level 95, no associativity) : type_scope.
End MyIff.
Check iff.
Theorem iff_sym : forall P Q : Prop,
  (P <-> Q) -> (Q <-> P).
Proof.
  intros P Q H.
  split.
  - apply H.
  - apply H.
Qed.
Lemma not_true_iff_false : forall b,
  b <> true <-> b = false.
Proof.
  intros b. split.
  - unfold not. intros H. destruct b eqn:E.
    + exfalso. apply H. reflexivity.
    + reflexivity.
  - intros H. rewrite H. unfold not. intros H'. discriminate H'.
Qed.
